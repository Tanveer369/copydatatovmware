Sure, here are the steps and technical specifications for setting up a Linux AWS EC2 instance, preparing the system configuration, and storing it in Git/DB using Jenkins automation:

Steps:

Create a new AWS EC2 instance using the desired operating system image (e.g. Ubuntu 20.04).
Create a new IAM role with the required permissions for accessing AWS resources, such as S3 or CodeCommit.
Install Jenkins on the EC2 instance.
Install the Git and Ansible plugins in Jenkins.
Create a new Git repository to store the system configuration files and scripts.
Create a new branch for each environment (e.g. development, testing, production) in the Git repository.
Write the required system configuration files and scripts (e.g. bashrc, aliases, hostfile, certificates, required third-party software like Java and Python).
Store the system configuration files and scripts in the appropriate branch in the Git repository.
Create a new Jenkins job to trigger the CICD pipeline whenever there are changes made to the codebase or system configurations.
Configure the Jenkins job to check out the appropriate branch from the Git repository.
Use a configuration management tool like Ansible to automate the installation of the required software and system configurations on the EC2 instance.
Configure the deployment tool like AWS CodeDeploy to deploy the application to the appropriate environment after a successful build and test.
Ensure that the system configuration is stored securely in Git or a database like MySQL or PostgreSQL.

Technical Specifications:

Infrastructure Setup:

Use AWS CloudFormation to create the required infrastructure and resources, such as EC2 instances, security groups, IAM roles, etc.
The infrastructure should be version-controlled using Git and stored in a separate repository.
Use Jenkins to automate the installation of the required software and system configurations.
Install the Git and Ansible plugins in Jenkins.

Continuous Integration:

Use Jenkins to automate the build, test, and deployment process.
The Jenkins job should be configured to trigger the CICD pipeline whenever there are changes made to the codebase or system configurations.
The Jenkins job should check out the Git repository containing the system configuration and any application code.
The Jenkins job should run the configuration management tool (e.g. Ansible) to configure the system as per the specifications.

Continuous Deployment:

Use a Continuous Deployment tool such as AWS CodeDeploy, Kubernetes, or Ansible Tower to automate the deployment of the application.
The deployment tool should be configured to deploy the application to the appropriate environment (development, testing, or production).
The deployment tool should be triggered automatically by Jenkins after a successful build and test.

Storing System Configuration:

The system configuration should be stored in a Git repository for version control and easy management.
Use a version control system such as Git to store the configuration files and scripts.
Create a separate branch or repository for each environment (development, testing, and production).
Use a database such as MySQL or PostgreSQL to store the system configuration if Git is not feasible.

By following these steps and technical specifications, you can set up a CICD pipeline using Jenkins automation that automates the configuration of 
a Linux AWS EC2 instance, stores the system configuration in Git or a database, and deploys the application to the appropriate environment. 
This will help ensure consistency and reduce manual effort in setting up new instances for development, testing, and production environments.
